<?php

namespace qsyk\models;

use common\components\Utility;
use Yii;
use yii\helpers\ArrayHelper;
//use common\models\User;
use qsyk\models\User;

/**
 * This is the model class for table "tag".
 *
 * @property integer $id
 * @property string $name
 * @property integer $level
 * @property string $keyword
 * @property string $desc
 * @property integer $logo
 */
class Tag extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'tag';
    }
    
    public static function getDb()
    {
        return Yii::$app->get('qsykDb');
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'level', 'keyword'], 'required'],
            [['level'], 'integer'],
            [['name'], 'string', 'max' => 40],
            [['keyword'], 'string', 'max' => 200],
        ];
    }

    public function getSid()
    {
        return Utility::sid($this->id);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'level' => 'Level',
            'keyword' => 'Keyword',
            'desc' => 'Desc',
            'logo' => 'Logo',
        ];
    }

    public static function getUserTagIds() {
        $user = User::getAuthUser();
        if ($user) {
            $userTags = UserTag::find()->where([
                'user_id'=>$user->id
            ])->all();
            $tagIds = [];
            foreach($userTags as $uTag) {
                $tagIds[] = $uTag->tag_id;
            }
            return $tagIds;
        } else {
            return [];
        }


    }

    public function getFocusCount() {
        $c =  UserTag::find()->where([
            'tag_id'=>$this->id
        ])->count();
		$c += 12000;
		$c += $this->id * $this->id;
		return $c;
    }

    public function getFocusUsers() {
        $uTags = UserTag::find()->where([
            'tag_id'=>$this->id
        ])->orderBy(['id'=>SORT_DESC])->all();
        $users = [];
        foreach($uTags as $uTag) {
            $users[] = User::findOne($uTag->user_id);
        }
        return ArrayHelper::toArray(
            $users,
            [
                'qsyk\models\User' => [
                    "username",
                    "avatarSid",
                ],
            ]);
    }


    public function getIsFocus() {
        $user = User::getAuthUser();
        if ($user) {
            return UserTag::find()->where([
                'user_id'=>$user->id,
                'tag_id'=>$this->id
            ])->exists();
        }
        return false;
    }

    public function getLogoSid()
    {
        return Utility::sid($this->logo);
    }

    public function fields()
    {
        $fields =  parent::fields();
        unset($fields['id'], $fields['level'], $fields['logo']);
        $fields[] = 'sid';
        $fields[] = 'logoSid';
        $fields[] = 'focusCount';
        return $fields;
    }

    public static function tagToArray($models) {
        return ArrayHelper::toArray(
            $models,
            [
                'app\models\Tag' => [
                    "sid",
                    "name",
                    "keyword",
                    "desc",
                    "logoSid",
                    "focusCount",

                ],
            ]);
    }


    public function extraFields()
    {
        return ['isFocus', 'focusUsers']; // TODO: Change the autogenerated stub
    }

}
